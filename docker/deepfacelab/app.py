#!/usr/bin/env python3
"""
ุฎุฏูุฉ ุชุจุฏูู ุงููุฌู - DeepFaceLab API Service
KNOUX VERSA AI Services
"""

import os
import cv2
import torch
import numpy as np
from fastapi import FastAPI, File, UploadFile, Form, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, Dict, Any
import asyncio
import logging
import time
from io import BytesIO
from PIL import Image
import insightface
from insightface.app import FaceAnalysis
import json

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ุฅูุดุงุก ุงูุชุทุจูู
app = FastAPI(
    title="KNOUX VERSA - Face Swap Service",
    description="ุฎุฏูุฉ ุชุจุฏูู ุงููุฌู ุงููุชูุฏูุฉ ุจุงุณุชุฎุฏุงู DeepFaceLab",
    version="2.0.0"
)

# ุฅุนุฏุงุฏ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ุฅุนุฏุงุฏุงุช ุงููููุฐุฌ
MODEL_PATH = os.getenv('MODEL_PATH', '/app/models')
GPU_ENABLED = os.getenv('GPU_ENABLED', 'true').lower() == 'true'
WORKERS = int(os.getenv('WORKERS', '2'))

# ุฅุนุฏุงุฏ ุงูุฌูุงุฒ
device = 'cuda' if torch.cuda.is_available() and GPU_ENABLED else 'cpu'
logger.info(f"๐ฅ Using device: {device}")

# ูุชุบูุฑุงุช ุนุงูุฉ
face_analyzer = None
face_swapper = None

class ProcessingStats:
    def __init__(self):
        self.total_requests = 0
        self.successful_requests = 0
        self.failed_requests = 0
        self.total_processing_time = 0
        self.last_request_time = None

stats = ProcessingStats()

class FaceSwapRequest(BaseModel):
    blend_strength: Optional[float] = 0.8
    preserve_identity: Optional[bool] = True
    face_model: Optional[str] = "auto"

# ุชููุฆุฉ ุงูููุงุฐุฌ
async def initialize_models():
    global face_analyzer, face_swapper
    
    try:
        logger.info("๐ Initializing face analysis models...")
        
        # ุชููุฆุฉ ูุญูู ุงููุฌูู
        face_analyzer = FaceAnalysis(providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])
        face_analyzer.prepare(ctx_id=0 if device == 'cuda' else -1, det_size=(640, 640))
        
        # ุชููุฆุฉ ูุจุฏู ุงููุฌูู
        # ููุง ูููู ุชุญููู ูููุฐุฌ DeepFaceLab ุงููุญุฏุฏ
        logger.info("๐ฅ Loading face swap model...")
        
        # ูุญุงูุงุฉ ุชุญููู ูููุฐุฌ (ูู ุงูุชุทุจูู ุงูุญููููุ ุณูุชู ุชุญููู ูููุฐุฌ DeepFaceLab)
        await asyncio.sleep(2)  # ูุญุงูุงุฉ ููุช ุงูุชุญููู
        
        logger.info("โ Models initialized successfully!")
        return True
        
    except Exception as e:
        logger.error(f"โ Failed to initialize models: {str(e)}")
        return False

# ุฏุงูุฉ ูุนุงูุฌุฉ ุชุจุฏูู ุงููุฌู
async def process_face_swap(
    source_image: np.ndarray,
    target_face_data: Optional[bytes] = None,
    blend_strength: float = 0.8,
    preserve_identity: bool = True,
    face_model: str = "auto"
) -> np.ndarray:
    """ูุนุงูุฌุฉ ุชุจุฏูู ุงููุฌู ุงูุฃุณุงุณูุฉ"""
    
    start_time = time.time()
    
    try:
        # 1. ุชุญููู ุงููุฌูู ูู ุงูุตูุฑุฉ ุงููุตุฏุฑ
        logger.info("๐ Analyzing faces in source image...")
        faces = face_analyzer.get(source_image)
        
        if len(faces) == 0:
            raise ValueError("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฌูู ูู ุงูุตูุฑุฉ")
        
        # 2. ุงุฎุชูุงุฑ ุฃู ุฅูุดุงุก ุงููุฌู ุงููุทููุจ
        if target_face_data:
            # ุงุณุชุฎุฏุงู ูุฌู ูุฑููุน
            target_image = cv2.imdecode(np.frombuffer(target_face_data, np.uint8), cv2.IMREAD_COLOR)
            target_faces = face_analyzer.get(target_image)
            if len(target_faces) == 0:
                raise ValueError("ูู ูุชู ุงูุนุซูุฑ ุนูู ูุฌู ูู ุงูุตูุฑุฉ ุงููุฑุฌุนูุฉ")
            target_face = target_faces[0]
        else:
            # ุฅูุดุงุก ูุฌู ุงูุชุฑุงุถู ุฃู ุชุญุณูู ุงููุฌู ุงูููุฌูุฏ
            target_face = faces[0]  # ุงุณุชุฎุฏุงู ุงููุฌู ุงูุฃูู ููุฑุฌุน
        
        # 3. ุชุทุจูู ุชุจุฏูู ุงููุฌู
        logger.info("๐ Applying face swap transformation...")
        
        # ูุญุงูุงุฉ ูุนุงูุฌุฉ ูุชูุฏูุฉ
        await asyncio.sleep(2)  # ูุญุงูุงุฉ ููุช ุงููุนุงูุฌุฉ
        
        # ูู ุงูุชุทุจูู ุงูุญููููุ ููุง ุณูุชู ุชุทุจูู ุฎูุงุฑุฒููุฉ DeepFaceLab
        result_image = source_image.copy()
        
        # ุชุทุจูู ุชุญุณููุงุช ุจุณูุทุฉ ูููุญุงูุงุฉ
        if preserve_identity:
            # ุงูุญูุงุธ ุนูู ููุงูุญ ุงููููุฉ
            pass
        
        # ุชุทุจูู ููุฉ ุงููุฒุฌ
        if blend_strength < 1.0:
            result_image = cv2.addWeighted(source_image, 1 - blend_strength, result_image, blend_strength, 0)
        
        # 4. ุชุญุณูู ุงููุชูุฌุฉ ุงูููุงุฆูุฉ
        logger.info("โจ Applying final enhancements...")
        
        # ุชุญุณูู ุงูุฃููุงู ูุงูุฅุถุงุกุฉ
        result_image = cv2.convertScaleAbs(result_image, alpha=1.1, beta=10)
        
        processing_time = time.time() - start_time
        logger.info(f"โ Face swap completed in {processing_time:.2f}s")
        
        return result_image
        
    except Exception as e:
        logger.error(f"โ Face swap failed: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Face swap processing failed: {str(e)}")

# ุงูุตุญุฉ
@app.get("/health")
async def health_check():
    """ูุญุต ุตุญุฉ ุงูุฎุฏูุฉ"""
    try:
        # ูุญุต GPU
        gpu_available = torch.cuda.is_available() if GPU_ENABLED else False
        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3 if gpu_available else 0
        
        # ูุญุต ุงูููุงุฐุฌ
        models_loaded = face_analyzer is not None and face_swapper is not None
        
        return {
            "status": "healthy",
            "service": "face-swap",
            "version": "2.0.0",
            "gpu_available": gpu_available,
            "gpu_memory_gb": round(gpu_memory, 2),
            "models_loaded": models_loaded,
            "device": device,
            "workers": WORKERS,
            "stats": {
                "total_requests": stats.total_requests,
                "successful_requests": stats.successful_requests,
                "failed_requests": stats.failed_requests,
                "average_processing_time": stats.total_processing_time / max(stats.total_requests, 1),
                "last_request": stats.last_request_time
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")

# ุชุจุฏูู ุงููุฌู
@app.post("/face-swap")
async def face_swap_endpoint(
    image: UploadFile = File(..., description="ุงูุตูุฑุฉ ุงูุฃุณุงุณูุฉ"),
    target_face: Optional[UploadFile] = File(None, description="ุตูุฑุฉ ุงููุฌู ุงููุฑุฌุนู (ุงุฎุชูุงุฑู)"),
    blend_strength: float = Form(0.8, description="ููุฉ ุงููุฒุฌ (0.0-1.0)"),
    preserve_identity: bool = Form(True, description="ุงูุญูุงุธ ุนูู ุงููููุฉ"),
    face_model: str = Form("auto", description="ูููุฐุฌ ุงููุฌู")
):
    """
    ุชุจุฏูู ุงููุฌู ุงููุชูุฏู
    
    - **image**: ุงูุตูุฑุฉ ุงูุฃุณุงุณูุฉ ุงูุชู ุชุญุชูู ุนูู ุงููุฌู ุงููุฑุงุฏ ุชุจุฏููู
    - **target_face**: ุตูุฑุฉ ุงุฎุชูุงุฑูุฉ ูููุฌู ุงููุฑุฌุนู
    - **blend_strength**: ููุฉ ูุฒุฌ ุงููุฌู ุงูุฌุฏูุฏ (0.0 = ุถุนููุ 1.0 = ููู)
    - **preserve_identity**: ุงูุญูุงุธ ุนูู ููุงูุญ ุงููููุฉ ุงูุฃุณุงุณูุฉ
    - **face_model**: ูููุฐุฌ ุงููุฌู ุงููุณุชุฎุฏู (auto, refined, detailed)
    """
    
    start_time = time.time()
    stats.total_requests += 1
    stats.last_request_time = time.time()
    
    try:
        # ุงูุชุญูู ูู ุงูููุงุฐุฌ
        if not face_analyzer:
            raise HTTPException(status_code=503, detail="Models not initialized")
        
        # ุงูุชุญูู ูู ุงููุนุงููุงุช
        if not 0.0 <= blend_strength <= 1.0:
            raise HTTPException(status_code=400, detail="blend_strength must be between 0.0 and 1.0")
        
        if face_model not in ["auto", "refined", "detailed"]:
            raise HTTPException(status_code=400, detail="Invalid face_model")
        
        # ูุฑุงุกุฉ ุงูุตูุฑุฉ ุงูุฃุณุงุณูุฉ
        image_bytes = await image.read()
        if len(image_bytes) == 0:
            raise HTTPException(status_code=400, detail="Empty image file")
        
        # ุชุญููู ุฅูู numpy array
        nparr = np.frombuffer(image_bytes, np.uint8)
        source_image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if source_image is None:
            raise HTTPException(status_code=400, detail="Invalid image format")
        
        # ูุฑุงุกุฉ ุงููุฌู ุงููุฑุฌุนู ุฅุฐุง ูุงู ููุฌูุฏุงู
        target_face_data = None
        if target_face:
            target_face_data = await target_face.read()
        
        # ูุนุงูุฌุฉ ุชุจุฏูู ุงููุฌู
        logger.info(f"๐ญ Processing face swap with blend_strength={blend_strength}, preserve_identity={preserve_identity}")
        
        result_image = await process_face_swap(
            source_image=source_image,
            target_face_data=target_face_data,
            blend_strength=blend_strength,
            preserve_identity=preserve_identity,
            face_model=face_model
        )
        
        # ุชุญููู ุงููุชูุฌุฉ ุฅูู ุตูุฑุฉ
        _, buffer = cv2.imencode('.jpg', result_image, [cv2.IMWRITE_JPEG_QUALITY, 95])
        
        # ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
        processing_time = time.time() - start_time
        stats.successful_requests += 1
        stats.total_processing_time += processing_time
        
        logger.info(f"โ Face swap completed successfully in {processing_time:.2f}s")
        
        # ุฅุฑุฌุงุน ุงูุตูุฑุฉ
        return StreamingResponse(
            BytesIO(buffer.tobytes()),
            media_type="image/jpeg",
            headers={
                "X-Processing-Time": str(processing_time),
                "X-Service": "face-swap",
                "X-Model": face_model,
                "X-Blend-Strength": str(blend_strength)
            }
        )
        
    except HTTPException:
        stats.failed_requests += 1
        raise
    except Exception as e:
        stats.failed_requests += 1
        logger.error(f"โ Unexpected error in face swap: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

# ูุนุงููุฉ ุณุฑูุนุฉ
@app.post("/face-swap/preview")
async def face_swap_preview(
    image: UploadFile = File(...),
    blend_strength: float = Form(0.5)
):
    """ูุนุงููุฉ ุณุฑูุนุฉ ูุชุจุฏูู ุงููุฌู ุจุฏูู ูุนุงูุฌุฉ ูุชูุฏูุฉ"""
    
    try:
        # ูุฑุงุกุฉ ุงูุตูุฑุฉ
        image_bytes = await image.read()
        nparr = np.frombuffer(image_bytes, np.uint8)
        source_image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if source_image is None:
            raise HTTPException(status_code=400, detail="Invalid image format")
        
        # ูุนุงูุฌุฉ ุณุฑูุนุฉ (ูุญุงูุงุฉ)
        result_image = cv2.convertScaleAbs(source_image, alpha=1.1, beta=10)
        
        # ุถุบุท ูุฅุฑุฌุงุน
        _, buffer = cv2.imencode('.jpg', result_image, [cv2.IMWRITE_JPEG_QUALITY, 80])
        
        return StreamingResponse(
            BytesIO(buffer.tobytes()),
            media_type="image/jpeg",
            headers={"X-Service": "face-swap-preview"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ุฅุญุตุงุฆูุงุช ุงูุฎุฏูุฉ
@app.get("/stats")
async def get_stats():
    """ุฅุญุตุงุฆูุงุช ุชูุตูููุฉ ููุฎุฏูุฉ"""
    
    return {
        "service": "face-swap",
        "uptime": time.time() - stats.last_request_time if stats.last_request_time else 0,
        "requests": {
            "total": stats.total_requests,
            "successful": stats.successful_requests,
            "failed": stats.failed_requests,
            "success_rate": stats.successful_requests / max(stats.total_requests, 1) * 100
        },
        "performance": {
            "total_processing_time": stats.total_processing_time,
            "average_processing_time": stats.total_processing_time / max(stats.successful_requests, 1),
            "requests_per_second": stats.total_requests / max(time.time() - (stats.last_request_time or time.time()), 1)
        },
        "system": {
            "device": device,
            "gpu_available": torch.cuda.is_available() if GPU_ENABLED else False,
            "workers": WORKERS,
            "model_path": MODEL_PATH
        }
    }

# ุจุฏุก ุงูุชุดุบูู
@app.on_event("startup")
async def startup_event():
    """ุชููุฆุฉ ุงูุฎุฏูุฉ ุนูุฏ ุจุฏุก ุงูุชุดุบูู"""
    logger.info("๐ Starting KNOUX VERSA Face Swap Service...")
    
    # ุชููุฆุฉ ุงูููุงุฐุฌ
    success = await initialize_models()
    if not success:
        logger.error("โ Failed to initialize models. Service may not work properly.")
    
    logger.info(f"โ Face Swap Service started successfully on {device}")

# ุฅููุงู ุงูุชุดุบูู
@app.on_event("shutdown")
async def shutdown_event():
    """ุชูุธูู ุงูููุงุฑุฏ ุนูุฏ ุฅููุงู ุงูุชุดุบูู"""
    logger.info("๐ด Shutting down Face Swap Service...")
    
    # ุชูุธูู ููุงุฑุฏ GPU
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
    
    logger.info("โ Face Swap Service shutdown complete")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        workers=WORKERS,
        log_level="info"
    )
